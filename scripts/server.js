/**
 * The purpose of this file is to create a server for the miqmaq game
 * that stores two peices of game information:
 *  
 * gameScore: The users  score which is incremented by 1 and posted to the 
 * server when onSuccess is called.
 * 
 * totalRounds: The total number fo rounds played by the user which is 
 * increemented by 1 after each round ( when onSuccess() and onFaliure()
 * are called).
 * 
 * Authors: Rian Amhed (A00437022)
            Rishi Bhalla 
            Alex Bestchart (A00426091)
            Travis Burke (A00418937)  wrote majority of the server side code.
            Ethan Cooke (A00446392)
 */

// Import the express framework(make it usable).
const express = require("express");

// define the Express ssserver function.
const server = express();

// set the port where the server listens for clients.
const port = 3085;

// enable the server to utilize JSON {name:value} pairs.
server.use(express.json());

// enable the Incoming JSON objects tobe of any type.
server.use(express.urlencoded({ extended: true }));

// Initialize variables.
let gameScore = 0; //The number of questions the user answered correct.
let totalRounds = 0; //The total number of questions answered by the user.

/**
 * The purpose of this function is to execute the instructions
 * necessary: Allow get an post requests originating from the
 * client side that ensure the responces only containe the
 * specified content.
 *
 * req - request object generated by the client.
 * res - request object generated by the client.
 * next - predefined function desigend to run adter a specific middleware function.
 *
 */
const allowCrossDomain = function (req, res, next) {
    // allow any origin
    res.header("Access-Control-Allow-Origin", "*");
    // allow any method
    res.header("Access-Control-Allow-Methods", "GET,POST");
    // accept only headers with Content-Type included
    res.header("Access-Control-Allow-Headers", "Content-Type");
    // since this middleware function does not terminate the request/response cycle
    // the next() function must be called to continue to the succeeding middleware function
    next();
};

// Allow the server to have the above characteristics
server.use(allowCrossDomain);

/**
 * The purpose of this function is to respond to a POST request with relative
 * endpoint: /scorePost
 *
 * req - request object generated by the HTTP event
 * res - request object generated by the HTTP event
 *
 * Author: Travis Burke (wrote initial function)
 *
 */
server.post("/scorePost", (req, res) => {
    gameScore = req.body.gameScore;
    totalRounds = req.body.totalRounds;

    return res.status(200).send({
        gameScore: gameScore,
        totalRounds: totalRounds,
    });
});

/**
 * The purpose of this function is to respond to a Get request with relative
 * endpoint: /scoreGet
 *
 * req - request object generated by the HTTP event
 * res - request object generated by the HTTP event
 *
 * Author: Travis Burke (wrote initial function)
 *
 */
server.get("/scoreGet", (req, res) => {
    // send the updated values back to the client.
    return res.status(200).send({
        gameScore: gameScore,
        totalRounds: totalRounds,
    });
});

/**
 * THe purpose of this functions to ensure the server is listening on the
 * specified port and print a message to the server to confirm
 *
 * Author: Travis Burke (Wrote initial function)
 */
server.listen(port, () => {
    console.log("Server is running on ugdev.cs.smu.ca:3085");
    console.log("Listening on port 3085");
});
